// Code generated by mockery v2.35.4. DO NOT EDIT.

package types

import mock "github.com/stretchr/testify/mock"

// IConfigMock is an autogenerated mock type for the IConfig type
type IConfigMock struct {
	mock.Mock
}

// AddConfigPath provides a mock function with given fields: in
func (_m *IConfigMock) AddConfigPath(in string) {
	_m.Called(in)
}

// AutomaticEnv provides a mock function with given fields:
func (_m *IConfigMock) AutomaticEnv() {
	_m.Called()
}

// Get provides a mock function with given fields: key
func (_m *IConfigMock) Get(key string) interface{} {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ReadInConfig provides a mock function with given fields:
func (_m *IConfigMock) ReadInConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *IConfigMock) Set(key string, value interface{}) {
	_m.Called(key, value)
}

// SetConfigName provides a mock function with given fields: in
func (_m *IConfigMock) SetConfigName(in string) {
	_m.Called(in)
}

// SetConfigType provides a mock function with given fields: in
func (_m *IConfigMock) SetConfigType(in string) {
	_m.Called(in)
}

// WriteConfig provides a mock function with given fields:
func (_m *IConfigMock) WriteConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIConfigMock creates a new instance of IConfigMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConfigMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConfigMock {
	mock := &IConfigMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
