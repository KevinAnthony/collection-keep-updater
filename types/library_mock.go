// Code generated by mockery v2.35.4. DO NOT EDIT.

package types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ILibraryMock is an autogenerated mock type for the ILibrary type
type ILibraryMock struct {
	mock.Mock
}

// GetBooksInCollection provides a mock function with given fields: ctx
func (_m *ILibraryMock) GetBooksInCollection(ctx context.Context) (ISBNBooks, error) {
	ret := _m.Called(ctx)

	var r0 ISBNBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ISBNBooks, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ISBNBooks); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ISBNBooks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWanted provides a mock function with given fields: wanted
func (_m *ILibraryMock) SaveWanted(wanted ISBNBooks) error {
	ret := _m.Called(wanted)

	var r0 error
	if rf, ok := ret.Get(0).(func(ISBNBooks) error); ok {
		r0 = rf(wanted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewILibraryMock creates a new instance of ILibraryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILibraryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILibraryMock {
	mock := &ILibraryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
