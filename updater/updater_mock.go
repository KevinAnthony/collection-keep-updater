// Code generated by mockery v2.35.4. DO NOT EDIT.

package updater

import (
	context "context"

	types "github.com/kevinanthony/collection-keep-updater/types"
	mock "github.com/stretchr/testify/mock"
)

// IUpdaterMock is an autogenerated mock type for the IUpdater type
type IUpdaterMock struct {
	mock.Mock
}

// GetAllAvailableBooks provides a mock function with given fields: ctx, series
func (_m *IUpdaterMock) GetAllAvailableBooks(ctx types.ICommand, series []types.Series) (types.ISBNBooks, error) {
	ret := _m.Called(ctx, series)

	var r0 types.ISBNBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ICommand, []types.Series) (types.ISBNBooks, error)); ok {
		return rf(ctx, series)
	}
	if rf, ok := ret.Get(0).(func(types.ICommand, []types.Series) types.ISBNBooks); ok {
		r0 = rf(ctx, series)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ISBNBooks)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ICommand, []types.Series) error); ok {
		r1 = rf(ctx, series)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLibrary provides a mock function with given fields: ctx, library, availableBooks
func (_m *IUpdaterMock) UpdateLibrary(ctx context.Context, library types.ILibrary, availableBooks types.ISBNBooks) (types.ISBNBooks, error) {
	ret := _m.Called(ctx, library, availableBooks)

	var r0 types.ISBNBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ILibrary, types.ISBNBooks) (types.ISBNBooks, error)); ok {
		return rf(ctx, library, availableBooks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ILibrary, types.ISBNBooks) types.ISBNBooks); ok {
		r0 = rf(ctx, library, availableBooks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ISBNBooks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ILibrary, types.ISBNBooks) error); ok {
		r1 = rf(ctx, library, availableBooks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUpdaterMock creates a new instance of IUpdaterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUpdaterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUpdaterMock {
	mock := &IUpdaterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
